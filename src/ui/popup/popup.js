// src/ui/popup/popup.js
// –õ–æ–≥–∏–∫–∞ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞: –Ω–∞–≤–∏–≥–∞—Ü–∏—è, –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞, –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥, –æ—Ç–ø—Ä–∞–≤–∫–∞ AI-–∑–∞–ø—Ä–æ—Å–æ–≤.

const mainDashboard = document.getElementById('main-dashboard');
const settingsPanel = document.getElementById('settings-panel');
const settingsBtn = document.getElementById('settings-btn');
const micBtn = document.getElementById('mic-btn');
const backBtn = document.getElementById('back-to-main-btn');
const optionsLink = document.getElementById('options-link');
const executeBtn = document.getElementById('execute-btn');
const modeSwitcher = document.getElementById('mode-switcher');
const mainTextarea = document.getElementById('main-textarea');
const resultDisplay = document.getElementById('result-display');

let currentMode = 'writer'; // –†–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
let recognizing = false;
let recognition;

// --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ø–∞–Ω–µ–ª—è–º --- //
settingsBtn.addEventListener('click', () => {
  mainDashboard.classList.add('hidden');
  settingsPanel.classList.remove('hidden');
});

backBtn.addEventListener('click', () => {
  settingsPanel.classList.add('hidden');
  mainDashboard.classList.remove('hidden');
});

optionsLink.addEventListener('click', (e) => {
  e.preventDefault();
  chrome.runtime.openOptionsPage();
});

// --- –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ --- //
modeSwitcher.addEventListener('click', (e) => {
  if (e.target.classList.contains('mode-btn')) {
    document.querySelector('.mode-btn.active').classList.remove('active');
    e.target.classList.add('active');
    currentMode = e.target.dataset.mode;
    mainTextarea.placeholder = `–¢–µ–∫—Å—Ç –¥–ª—è —Ä–µ–∂–∏–º–∞: ${currentMode}...`;
  }
});

// --- –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ (Web Speech API) --- //
if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
  recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
  recognition.continuous = false;
  recognition.interimResults = true;
  recognition.lang = 'ru-RU'; // –†—É—Å—Å–∫–∏–π –¥–ª—è –¥–∏–∫—Ç–æ–≤–∫–∏
  recognition.onresult = (event) => {
    let interim = '';
    for (let i = event.resultIndex; i < event.results.length; ++i) {
      if (event.results[i].isFinal) {
        mainTextarea.value += (mainTextarea.value ? ' ' : '') + event.results[i][0].transcript;
      } else {
        interim += event.results[i][0].transcript;
      }
    }
  };
  recognition.onend = () => {
    recognizing = false;
    micBtn.textContent = 'üé§';
  };
  micBtn.addEventListener('click', () => {
    if (!recognizing) { recognition.start(); recognizing = true; micBtn.textContent = '‚èπÔ∏è'; }
    else { recognition.stop(); }
  });
} else {
  micBtn.disabled = true;
  micBtn.title = '–ì–æ–ª–æ—Å–æ–≤–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è';
}

// --- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è --- //
executeBtn.addEventListener('click', async () => {
  const text = mainTextarea.value.trim();
  if (!text) { resultDisplay.textContent = '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.'; return; }

  resultDisplay.textContent = '–î—É–º–∞—é...';
  resultDisplay.setAttribute('aria-busy', 'true');
  executeBtn.disabled = true;

  chrome.runtime.sendMessage(
    { action: 'performAiAction', data: { type: currentMode, payload: { text } } },
    (response) => {
      if (chrome.runtime.lastError) {
        resultDisplay.textContent = `–û—à–∏–±–∫–∞: ${chrome.runtime.lastError.message}`;
      } else if (response.success) {
        resultDisplay.textContent = response.data;
      } else {
        resultDisplay.textContent = `–û—à–∏–±–∫–∞: ${response.error}`;
      }
      executeBtn.disabled = false;
      resultDisplay.setAttribute('aria-busy', 'false');
    }
  );
});
