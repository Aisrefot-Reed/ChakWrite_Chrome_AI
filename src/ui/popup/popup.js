// src/ui/popup/popup.js
// Popup UI —Å Web Speech API, –≤—Å–µ–º–∏ —Ä–µ–∂–∏–º–∞–º–∏ —Ä–∞–±–æ—Ç—ã –∏ —Å—Ç–µ–∫–ª—è–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º.

// === –≠–õ–ï–ú–ï–ù–¢–´ DOM === //
const mainDashboard = document.getElementById('main-dashboard');
const settingsPanel = document.getElementById('settings-panel');
const settingsBtn = document.getElementById('settings-btn');
const backBtn = document.getElementById('back-to-main-btn');
const optionsLink = document.getElementById('options-link');
const executeBtn = document.getElementById('execute-btn');
const modeSwitcher = document.getElementById('mode-switcher');
const mainTextarea = document.getElementById('main-textarea');
const resultDisplay = document.getElementById('result-display');
const voiceInputBtn = document.getElementById('voice-input-btn');
const rewriterOptions = document.getElementById('rewriter-options');
const toneSelect = document.getElementById('tone-select');
const lengthSelect = document.getElementById('length-select');
const resultActions = document.getElementById('result-actions');
const copyResultBtn = document.getElementById('copy-result-btn');
const clearResultBtn = document.getElementById('clear-result-btn');
const quickNeuroMode = document.getElementById('quick-neuro-mode');

// === –°–û–°–¢–û–Ø–ù–ò–ï === //
let currentMode = 'writer';
let isListening = false;
let recognition = null;

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø === //
document.addEventListener('DOMContentLoaded', () => {
  initSpeechRecognition();
  loadSettings();
  updatePlaceholder();
  console.log('[ChakWrite Popup] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
});

// === –ó–ê–ì–†–£–ó–ö–ê –ù–ê–°–¢–†–û–ï–ö === //
function loadSettings() {
  chrome.storage.local.get(['userPreferences'], (result) => {
    if (result.userPreferences) {
      quickNeuroMode.value = result.userPreferences.neuroFeature || 'none';
    }
  });
}

// === –ù–ê–í–ò–ì–ê–¶–ò–Ø === //
settingsBtn.addEventListener('click', () => {
  mainDashboard.classList.add('hidden');
  settingsPanel.classList.remove('hidden');
});

backBtn.addEventListener('click', () => {
  settingsPanel.classList.add('hidden');
  mainDashboard.classList.remove('hidden');
});

optionsLink.addEventListener('click', (e) => {
  e.preventDefault();
  chrome.runtime.openOptionsPage();
});

// === –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –†–ï–ñ–ò–ú–û–í === //
modeSwitcher.addEventListener('click', (e) => {
  const btn = e.target.closest('.mode-btn');
  if (!btn) return;

  // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
  document.querySelectorAll('.mode-btn').forEach(b => {
    b.classList.remove('active');
    b.setAttribute('aria-selected', 'false');
  });
  
  btn.classList.add('active');
  btn.setAttribute('aria-selected', 'true');
  currentMode = btn.dataset.mode;
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è rewriter
  if (currentMode === 'rewriter') {
    rewriterOptions.classList.remove('hidden');
  } else {
    rewriterOptions.classList.add('hidden');
  }
  
  updatePlaceholder();
  console.log('[ChakWrite Popup] –†–µ–∂–∏–º –∏–∑–º–µ–Ω—ë–Ω:', currentMode);
});

function updatePlaceholder() {
  const placeholders = {
    writer: '–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å...',
    rewriter: '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è...',
    summarizer: '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ...',
    proofreader: '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏...',
    autocomplete: '–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è...'
  };
  
  mainTextarea.placeholder = placeholders[currentMode] || '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...';
}

// === WEB SPEECH API === //
function initSpeechRecognition() {
  if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
    console.warn('[ChakWrite Popup] Web Speech API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
    voiceInputBtn.disabled = true;
    voiceInputBtn.title = '–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ';
    return;
  }

  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
  recognition = new SpeechRecognition();
  
  recognition.lang = 'ru-RU';
  recognition.continuous = true;
  recognition.interimResults = true;
  recognition.maxAlternatives = 1;

  recognition.onstart = () => {
    isListening = true;
    voiceInputBtn.classList.add('listening');
    voiceInputBtn.setAttribute('aria-label', '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥');
    showStatus('–°–ª—É—à–∞—é...', 'info');
  };

  recognition.onresult = (event) => {
    let interimTranscript = '';
    let finalTranscript = '';

    for (let i = event.resultIndex; i < event.results.length; i++) {
      const transcript = event.results[i][0].transcript;
      if (event.results[i].isFinal) {
        finalTranscript += transcript + ' ';
      } else {
        interimTranscript += transcript;
      }
    }

    if (finalTranscript) {
      mainTextarea.value += finalTranscript;
    }
  };

  recognition.onerror = (event) => {
    console.error('[ChakWrite Popup] Speech recognition error:', event.error);
    stopListening();
    
    const errorMessages = {
      'no-speech': '–†–µ—á—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞',
      'audio-capture': '–ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
      'not-allowed': '–î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –∑–∞–ø—Ä–µ—â—ë–Ω'
    };
    
    showStatus(errorMessages[event.error] || '–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏', 'error');
  };

  recognition.onend = () => {
    if (isListening) {
      // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –≤—Ä—É—á–Ω—É—é
      try {
        recognition.start();
      } catch (e) {
        stopListening();
      }
    }
  };
}

voiceInputBtn?.addEventListener('click', () => {
  if (!recognition) {
    showStatus('–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è', 'error');
    return;
  }

  if (isListening) {
    stopListening();
  } else {
    startListening();
  }
});

function startListening() {
  try {
    recognition.start();
  } catch (e) {
    console.error('[ChakWrite Popup] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ:', e);
    showStatus('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥', 'error');
  }
}

function stopListening() {
  isListening = false;
  voiceInputBtn.classList.remove('listening');
  voiceInputBtn.setAttribute('aria-label', '–ù–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥');
  
  if (recognition) {
    try {
      recognition.stop();
    } catch (e) {
      console.error('[ChakWrite Popup] –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', e);
    }
  }
}

// === –í–´–ü–û–õ–ù–ï–ù–ò–ï AI –î–ï–ô–°–¢–í–ò–Ø === //
executeBtn.addEventListener('click', async () => {
  const text = mainTextarea.value.trim();
  
  if (!text) {
    showStatus('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç', 'error');
    return;
  }

  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω
  if (isListening) {
    stopListening();
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º payload –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
  const payload = { text };
  
  if (currentMode === 'rewriter') {
    payload.tone = toneSelect.value;
    payload.length = lengthSelect.value;
  }

  // UI –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
  executeBtn.disabled = true;
  resultDisplay.innerHTML = '<p class="result-placeholder">ü§î –û–±—Ä–∞–±–æ—Ç–∫–∞...</p>';
  resultActions.classList.add('hidden');

  console.log('[ChakWrite Popup] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', { type: currentMode, payload });

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ background
  chrome.runtime.sendMessage(
    {
      action: 'performAiAction',
      data: {
        type: currentMode,
        payload
      }
    },
    (response) => {
      executeBtn.disabled = false;

      if (chrome.runtime.lastError) {
        console.error('[ChakWrite Popup] Runtime error:', chrome.runtime.lastError);
        displayError(`–û—à–∏–±–∫–∞: ${chrome.runtime.lastError.message}`);
        return;
      }

      if (response?.success) {
        displayResult(response.data);
        showStatus('–ì–æ—Ç–æ–≤–æ!', 'success');
      } else {
        displayError(response?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      }
    }
  );
});

function displayResult(text) {
  resultDisplay.textContent = text;
  resultActions.classList.remove('hidden');
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
  resultDisplay.style.opacity = '0';
  setTimeout(() => {
    resultDisplay.style.transition = 'opacity 0.3s';
    resultDisplay.style.opacity = '1';
  }, 10);
}

function displayError(message) {
  resultDisplay.innerHTML = `<p style="color: #e53e3e; text-align: center;">‚ùå ${message}</p>`;
  showStatus('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏', 'error');
}

// === –î–ï–ô–°–¢–í–ò–Ø –° –†–ï–ó–£–õ–¨–¢–ê–¢–û–ú === //
copyResultBtn?.addEventListener('click', async () => {
  const text = resultDisplay.textContent;
  
  try {
    await navigator.clipboard.writeText(text);
    showStatus('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
  } catch (e) {
    console.error('[ChakWrite Popup] –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', e);
    showStatus('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å', 'error');
  }
});

clearResultBtn?.addEventListener('click', () => {
  resultDisplay.innerHTML = '<p class="result-placeholder">–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å...</p>';
  resultActions.classList.add('hidden');
  mainTextarea.value = '';
  mainTextarea.focus();
});

// === –ë–´–°–¢–†–´–ï –ù–ê–°–¢–†–û–ô–ö–ò === //
quickNeuroMode?.addEventListener('change', (e) => {
  const neuroFeature = e.target.value;
  
  chrome.storage.local.get(['userPreferences'], (result) => {
    const prefs = result.userPreferences || {};
    prefs.neuroFeature = neuroFeature;
    
    chrome.storage.local.set({ userPreferences: prefs }, () => {
      showStatus('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
      console.log('[ChakWrite Popup] –ù–µ–π—Ä–æ-—Ä–µ–∂–∏–º –æ–±–Ω–æ–≤–ª—ë–Ω:', neuroFeature);
    });
  });
});

// === –°–¢–ê–¢–£–° –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø === //
function showStatus(message, type = 'info') {
  const statusIndicator = document.getElementById('status-indicator');
  if (!statusIndicator) return;

  statusIndicator.textContent = message;
  statusIndicator.className = `status-indicator ${type}`;
  statusIndicator.classList.remove('hidden');

  // –ê–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
  setTimeout(() => {
    statusIndicator.classList.add('hidden');
  }, 3000);
}

// === –ö–õ–ê–í–ò–ê–¢–£–†–ù–´–ï –°–û–ö–†–ê–©–ï–ù–ò–Ø === //
mainTextarea?.addEventListener('keydown', (e) => {
  // Ctrl/Cmd + Enter –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
    e.preventDefault();
    executeBtn.click();
  }
});

console.log('[ChakWrite Popup] –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤');
