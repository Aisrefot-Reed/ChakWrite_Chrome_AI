// src/content/index.js
// Content script —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ–π—Ä–æ-–∏–Ω–∫–ª—é–∑–∏–≤–Ω—ã—Ö —Ñ–∏—á, OCR, –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è, realtime proofreader.

// === –°–û–°–¢–û–Ø–ù–ò–ï === //
let settings = {};
let lastSelection = null; // –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
let autocompleteDebounceTimer = null;
let proofreadDebounceTimer = null;
let overlayVisible = false;

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø === //
chrome.runtime.sendMessage({ action: 'getInitialState' }, response => {
  if (response?.success) {
    settings = response.config;
    applyVisuals(settings.accessibility);
    initOcrListeners();
    console.log('[ChakWrite Content] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:', settings);
  }
});

// === –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô === //
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  if (request.action === 'updateVisuals') {
    settings.accessibility = request.settings;
    applyVisuals(request.settings);
    sendResponse({ success: true });
    return false;
  }

  // –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –≥–æ—Ä—è—á–∏–º –∫–ª–∞–≤–∏—à–∞–º
  if (request.action === 'performQuickAction') {
    const selectedText = window.getSelection().toString().trim();
    if (selectedText.length > 0) {
      handleQuickAction(request.type, selectedText);
    }
    sendResponse({ success: true });
    return false;
  }
});

// === –í–ò–ó–£–ê–õ–¨–ù–´–ï –ê–î–ê–ü–¢–ê–¶–ò–ò === //
function applyVisuals(accessibilitySettings) {
  if (!accessibilitySettings) return;

  const body = document.body;
  body.classList.remove('chakwrite-dyslexia-font', 'chakwrite-high-contrast');

  // –®—Ä–∏—Ñ—Ç –¥–ª—è –¥–∏—Å–ª–µ–∫—Å–∏–∏
  if (accessibilitySettings.font === 'dyslexia') {
    body.classList.add('chakwrite-dyslexia-font');
  }

  // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –º–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
  if (accessibilitySettings.spacing) {
    body.style.lineHeight = accessibilitySettings.spacing;
    body.style.letterSpacing = `${(parseFloat(accessibilitySettings.spacing) - 1) * 0.05}em`;
  }

  // –í—ã—Å–æ–∫–æ–∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º
  if (accessibilitySettings.highContrast) {
    body.classList.add('chakwrite-high-contrast');
  }
}

// === –í–´–î–ï–õ–ï–ù–ò–ï –¢–ï–ö–°–¢–ê === //
document.addEventListener('mouseup', (event) => {
  const selectedText = window.getSelection().toString().trim();
  
  if (selectedText.length > 3) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
    saveSelection();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ background
    chrome.runtime.sendMessage({ action: 'updateContext', data: { selectedText } });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º overlay –µ—Å–ª–∏ –≤—ã–¥–µ–ª–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ–∫—Å—Ç–∞
    if (selectedText.length > 10) {
      showUiOverlay(event.clientX, event.clientY, selectedText);
    }
  } else {
    hideOverlay();
  }
});

// === –°–û–•–†–ê–ù–ï–ù–ò–ï –ò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –í–´–î–ï–õ–ï–ù–ò–Ø === //
function saveSelection() {
  const selection = window.getSelection();
  if (selection.rangeCount > 0) {
    lastSelection = selection.getRangeAt(0).cloneRange();
  }
}

function restoreSelection() {
  if (lastSelection) {
    const selection = window.getSelection();
    selection.removeAllRanges();
    selection.addRange(lastSelection);
  }
}

// === –°–¢–ï–ö–õ–Ø–ù–ù–´–ô OVERLAY –° ARIA === //
function showUiOverlay(x, y, text) {
  let overlay = document.getElementById('chakwrite-overlay');
  if (!overlay) {
    overlay = createOverlay();
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
  const actions = getAvailableActions();
  
  overlay.innerHTML = `
    <div class="chakwrite-menu" role="menu" aria-label="ChakWrite Actions">
      ${actions.map((action, index) => `
        <button 
          data-action="${action.type}" 
          role="menuitem" 
          tabindex="${index === 0 ? 0 : -1}"
          aria-label="${action.label}"
        >
          <span class="icon">${action.icon}</span>
          <span class="label">${action.label}</span>
        </button>
      `).join('')}
    </div>
  `;
  
  // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º overlay
  positionOverlay(overlay, x, y);
  overlay.style.display = 'block';
  overlayVisible = true;

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  overlay.querySelectorAll('button').forEach((button, index) => {
    button.addEventListener('click', (e) => {
      const action = e.currentTarget.dataset.action;
      handleOverlayAction(action, text);
      hideOverlay();
    });

    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    button.addEventListener('keydown', (e) => {
      handleOverlayKeyboard(e, overlay.querySelectorAll('button'), index);
    });
  });

  // –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–π –∫–Ω–æ–ø–∫–µ
  overlay.querySelector('button')?.focus();
}

function createOverlay() {
  const overlay = document.createElement('div');
  overlay.id = 'chakwrite-overlay';
  overlay.className = 'chakwrite-overlay-glass';
  overlay.setAttribute('role', 'dialog');
  overlay.setAttribute('aria-modal', 'true');
  document.body.appendChild(overlay);
  return overlay;
}

function positionOverlay(overlay, x, y) {
  // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Å —É—á—ë—Ç–æ–º –≥—Ä–∞–Ω–∏—Ü viewport
  const rect = overlay.getBoundingClientRect();
  const viewportWidth = window.innerWidth;
  const viewportHeight = window.innerHeight;

  let left = x + 10;
  let top = y + 10;

  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –µ—Å–ª–∏ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
  if (left + rect.width > viewportWidth) {
    left = viewportWidth - rect.width - 10;
  }
  if (top + rect.height > viewportHeight) {
    top = y - rect.height - 10;
  }

  overlay.style.left = `${Math.max(10, left)}px`;
  overlay.style.top = `${Math.max(10, top)}px`;
}

function getAvailableActions() {
  const baseActions = [
    { type: 'rewriter', label: '–ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å', icon: '‚úçÔ∏è' },
    { type: 'proofreader', label: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å', icon: '‚úì' },
    { type: 'summarizer', label: '–†–µ–∑—é–º–µ', icon: 'üìù' },
  ];

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
  if (settings.userPreferences?.neuroFeature === 'dyslexia') {
    baseActions.push({ type: 'simplifier', label: '–£–ø—Ä–æ—Å—Ç–∏—Ç—å', icon: 'üîç' });
  }

  return baseActions;
}

function hideOverlay() {
  const overlay = document.getElementById('chakwrite-overlay');
  if (overlay) {
    overlay.style.display = 'none';
    overlayVisible = false;
  }
}

// === –ö–õ–ê–í–ò–ê–¢–£–†–ù–ê–Ø –ù–ê–í–ò–ì–ê–¶–ò–Ø OVERLAY === //
function handleOverlayKeyboard(event, buttons, currentIndex) {
  switch (event.key) {
    case 'ArrowDown':
      event.preventDefault();
      buttons[(currentIndex + 1) % buttons.length].focus();
      break;
    case 'ArrowUp':
      event.preventDefault();
      buttons[(currentIndex - 1 + buttons.length) % buttons.length].focus();
      break;
    case 'Escape':
      event.preventDefault();
      hideOverlay();
      break;
  }
}

// === –û–ë–†–ê–ë–û–¢–ö–ê –î–ï–ô–°–¢–í–ò–ô === //
function handleOverlayAction(action, text) {
  let payloadType = action;
  let payload = { text };

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–∂–∏–º—ã
  if (action === 'simplifier') {
    payloadType = 'rewriter';
    payload.tone = 'casual';
    payload.length = 'shorter';
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ background
  chrome.runtime.sendMessage(
    { action: 'performAiAction', data: { type: payloadType, payload } },
    (response) => {
      if (response?.success) {
        replaceSelectedText(response.data);
      } else {
        showNotification(`–û—à–∏–±–∫–∞: ${response?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, 'error');
      }
    }
  );

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
  showNotification('–û–±—Ä–∞–±–æ—Ç–∫–∞...', 'loading');
}

function handleQuickAction(type, text) {
  handleOverlayAction(type, text);
}

// === –í–°–¢–ê–í–ö–ê –¢–ï–ö–°–¢–ê === //
function replaceSelectedText(newText) {
  restoreSelection();
  
  const selection = window.getSelection();
  if (selection.rangeCount > 0) {
    const range = selection.getRangeAt(0);
    range.deleteContents();
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —É–∑–µ–ª
    const textNode = document.createTextNode(newText);
    range.insertNode(textNode);
    
    // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–Ω–µ—Ü –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    range.setStartAfter(textNode);
    range.setEndAfter(textNode);
    selection.removeAllRanges();
    selection.addRange(range);
    
    showNotification('–¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω', 'success');
  }
}

// === OCR –ß–ï–†–ï–ó TEXTDETECTOR === //
function initOcrListeners() {
  if (!settings.accessibility?.enableOcr) return;

  document.querySelectorAll('img').forEach(img => {
    img.style.cursor = 'pointer';
    img.title = '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (OCR)';
    img.addEventListener('click', (e) => {
      e.stopPropagation();
      performOcr(img);
    });
  });
}

async function performOcr(imgElement) {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ TextDetector API
    if (!('TextDetector' in window)) {
      showNotification('OCR –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è Chrome 91+ —Å –≤–∫–ª—é—á—ë–Ω–Ω—ã–º —Ñ–ª–∞–≥–æ–º Shape Detection API.', 'error');
      return;
    }

    showNotification('–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...', 'loading');

    const detector = new TextDetector();
    const detectedText = await detector.detect(imgElement);

    if (detectedText.length === 0) {
      showNotification('–¢–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'warning');
      return;
    }

    // –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    const extractedText = detectedText.map(item => item.rawValue).join(' ');
    
    // –°–æ–∑–¥–∞—ë–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –æ–±–ª–∞—Å—Ç—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    createOcrResultDialog(extractedText);
    
  } catch (error) {
    console.error('[ChakWrite] OCR Error:', error);
    showNotification(`–û—à–∏–±–∫–∞ OCR: ${error.message}`, 'error');
  }
}

function createOcrResultDialog(text) {
  const dialog = document.createElement('div');
  dialog.className = 'chakwrite-ocr-dialog';
  dialog.innerHTML = `
    <div class="chakwrite-ocr-content" role="dialog" aria-labelledby="ocr-title">
      <h3 id="ocr-title">–ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç</h3>
      <textarea readonly aria-label="–ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç">${text}</textarea>
      <div class="chakwrite-ocr-actions">
        <button id="ocr-copy" aria-label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
        <button id="ocr-close" aria-label="–ó–∞–∫—Ä—ã—Ç—å">–ó–∞–∫—Ä—ã—Ç—å</button>
      </div>
    </div>
  `;
  document.body.appendChild(dialog);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  dialog.querySelector('#ocr-copy').addEventListener('click', () => {
    navigator.clipboard.writeText(text);
    showNotification('–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω', 'success');
  });

  dialog.querySelector('#ocr-close').addEventListener('click', () => {
    dialog.remove();
  });

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
  dialog.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') dialog.remove();
  });
}

// === –ê–í–¢–û–î–û–ü–û–õ–ù–ï–ù–ò–ï –ù–ê TAB === //
document.addEventListener('keydown', (event) => {
  if (!settings.userPreferences?.autocompleteOnTab) return;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º Tab –≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö –ø–æ–ª—è—Ö
  if (event.key === 'Tab' && isEditableElement(event.target)) {
    event.preventDefault();
    const textBeforeCursor = getTextBeforeCursor(event.target);
    
    if (textBeforeCursor.trim().length > 5) {
      performAutocomplete(event.target, textBeforeCursor);
    }
  }
});

function isEditableElement(element) {
  return (
    element.isContentEditable ||
    element.tagName === 'TEXTAREA' ||
    (element.tagName === 'INPUT' && ['text', 'search', 'email'].includes(element.type))
  );
}

function getTextBeforeCursor(element) {
  if (element.isContentEditable) {
    const selection = window.getSelection();
    if (selection.rangeCount > 0) {
      const range = selection.getRangeAt(0);
      const preCaretRange = range.cloneRange();
      preCaretRange.selectNodeContents(element);
      preCaretRange.setEnd(range.endContainer, range.endOffset);
      return preCaretRange.toString();
    }
  } else {
    return element.value.substring(0, element.selectionStart);
  }
  return '';
}

function performAutocomplete(element, textBeforeCursor) {
  showNotification('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...', 'loading');

  chrome.runtime.sendMessage(
    { 
      action: 'performAiAction', 
      data: { 
        type: 'autocomplete', 
        payload: { text: textBeforeCursor } 
      } 
    },
    (response) => {
      if (response?.success && response.data) {
        insertAutocompleteText(element, response.data);
        showNotification('–ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ', 'success');
      } else {
        showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ', 'error');
      }
    }
  );
}

function insertAutocompleteText(element, text) {
  if (element.isContentEditable) {
    document.execCommand('insertText', false, text);
  } else {
    const start = element.selectionStart;
    const end = element.selectionEnd;
    element.value = element.value.substring(0, start) + text + element.value.substring(end);
    element.selectionStart = element.selectionEnd = start + text.length;
  }
}

// === REALTIME PROOFREADER === //
document.addEventListener('input', (event) => {
  if (!settings.userPreferences?.realtimeProofreader) return;
  if (!isEditableElement(event.target)) return;

  // Debounce –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  clearTimeout(proofreadDebounceTimer);
  proofreadDebounceTimer = setTimeout(() => {
    performRealtimeProofread(event.target);
  }, 2000); // 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–≤–æ–¥–∞
});

function performRealtimeProofread(element) {
  const text = element.isContentEditable ? element.textContent : element.value;
  
  if (text.trim().length < 20) return; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

  chrome.runtime.sendMessage(
    { 
      action: 'performAiAction', 
      data: { 
        type: 'proofreader', 
        payload: { text } 
      } 
    },
    (response) => {
      if (response?.success && response.data !== text) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
        showProofreadSuggestion(element, response.data);
      }
    }
  );
}

function showProofreadSuggestion(element, correctedText) {
  // –°–æ–∑–¥–∞—ë–º tooltip —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
  let tooltip = document.getElementById('chakwrite-proofread-tooltip');
  if (!tooltip) {
    tooltip = document.createElement('div');
    tooltip.id = 'chakwrite-proofread-tooltip';
    tooltip.className = 'chakwrite-tooltip';
    document.body.appendChild(tooltip);
  }

  tooltip.innerHTML = `
    <div class="tooltip-content">
      <p>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è</p>
      <button id="apply-proofread">–ü—Ä–∏–º–µ–Ω–∏—Ç—å</button>
      <button id="dismiss-proofread">–û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>
    </div>
  `;

  // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –æ–∫–æ–ª–æ —ç–ª–µ–º–µ–Ω—Ç–∞
  const rect = element.getBoundingClientRect();
  tooltip.style.left = `${rect.left}px`;
  tooltip.style.top = `${rect.bottom + 5}px`;
  tooltip.style.display = 'block';

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  tooltip.querySelector('#apply-proofread').addEventListener('click', () => {
    if (element.isContentEditable) {
      element.textContent = correctedText;
    } else {
      element.value = correctedText;
    }
    tooltip.style.display = 'none';
    showNotification('–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã', 'success');
  });

  tooltip.querySelector('#dismiss-proofread').addEventListener('click', () => {
    tooltip.style.display = 'none';
  });
}

// === –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø === //
function showNotification(message, type = 'info') {
  let notification = document.getElementById('chakwrite-notification');
  if (!notification) {
    notification = document.createElement('div');
    notification.id = 'chakwrite-notification';
    notification.className = 'chakwrite-notification';
    notification.setAttribute('role', 'status');
    notification.setAttribute('aria-live', 'polite');
    document.body.appendChild(notification);
  }

  notification.className = `chakwrite-notification chakwrite-notification-${type}`;
  notification.textContent = message;
  notification.style.display = 'block';

  // –ê–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã (–∫—Ä–æ–º–µ loading)
  if (type !== 'loading') {
    setTimeout(() => {
      notification.style.display = 'none';
    }, 3000);
  }
}

// === –ó–ê–ö–†–´–¢–ò–ï OVERLAY –ü–†–ò –ö–õ–ò–ö–ï –°–ù–ê–†–£–ñ–ò === //
document.addEventListener('mousedown', (event) => {
  if (!overlayVisible) return;
  
  const overlay = document.getElementById('chakwrite-overlay');
  if (overlay && !overlay.contains(event.target)) {
    hideOverlay();
  }
});

// === –ó–ê–ö–†–´–¢–ò–ï OVERLAY –ü–û ESCAPE === //
document.addEventListener('keydown', (event) => {
  if (event.key === 'Escape' && overlayVisible) {
    hideOverlay();
  }
});

console.log('[ChakWrite Content] Content script –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤');
